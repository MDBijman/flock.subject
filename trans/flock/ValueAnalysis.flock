module examples/Min
 
properties
  values: Environment

property rules
  values(_.end) = {[Map[name, Value]]}
  values(prev -> Assign(n, Int(i))) = { k |-> v | (k |-> v)  <- values(prev), k != n } \[Environment]/ {n |-> Const(i)}
  values(prev -> Assign(n, _))      = { k |-> v | (k |-> v)  <- values(prev), k != n } \[Environment]/ {n |-> Top()}
  values(prev -> _) = values(prev)

types
  ConstProp =
  | Top()
  | Const(int)
  | Bottom()
  
lattices
  Value where
    type = ConstProp
    bottom = Bottom()
    top = Top()
    lub(l, r) = match (l, r) with
      | (Top(), _) => Top()
      | (_, Top()) => Top()
      | (Const(i), Const(j)) => if i == j then Const(i) else Top()
      | (_, Bottom()) => l
      | (Bottom(), _) => r
      
  Environment where
    type = Map[name, Value]
    bottom = Map[name, Value].bottom
    top = Map[name, Value].top
    lub(l, r) = Map[name, Value].lub(l, r)
    