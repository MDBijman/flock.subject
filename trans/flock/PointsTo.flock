module examples/PointsTo
 
types
  LocationId = 
  | Top()
  | Loc(int)
  | Bottom()

lattices

  Location where
    type = LocationId
    bottom = Bottom()
    top = Top()
    lub(l, r) = match (l, r) with
      | (Top(), _) => Top()
      | (_, Top()) => Top()
      | (Loc(i), Loc(j)) => if i == j then Loc(i) else Top()
      | (_, Bottom()) => l
      | (Bottom(), _) => r

  LocationMap where
    type = Map[name, Location]
    bottom = Map[name, Location].bottom
    top = Map[name, Location].top
    lub(l, r) = Map[name, Location].lub(l, r)
 
 
properties

  locations: LocationMap

property rules

  locations(_.end) = {[Map[name, Location]]}
  locations(prev -> Assign(n, Malloc())) = { k |-> v | (k |-> v)  <- locations(prev), k != n } \[LocationMap]/ {n |-> Loc(position(prev))}
  locations(prev -> Assign(n, Ref(m))) = { k |-> v | (k |-> v)  <- locations(prev), k != n } \[LocationMap]/ { n |-> v | (k |-> v)  <- locations(prev), k == m }
  locations(prev -> _) = locations(prev)
  