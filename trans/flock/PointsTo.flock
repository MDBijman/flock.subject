module PointsTo
signature

  sorts
    ID = string
    Expr
    Statement
    Start
    Function
    Return

  constructors
    IfThenElse : Expr * Statement * Statement -> Statement
    Assign : ID * Expr -> Statement
    DerefAssign : ID * Expr -> Statement
    Skip : Statement
    Block : list(Statement) -> Statement
    While : Expr * list(Statement) -> Statement
    Print : Expr -> Statement
    Root : Function -> Start
    Malloc : Expr
    Free : ID -> Statement
    Int : ID -> Expr
    Ref : ID -> Expr
    Deref : ID -> Expr
    True : Expr
    False : Expr
    Add : Expr * Expr -> Expr
    Sub : Expr * Expr -> Expr
    Gt : Expr * Expr -> Expr
    Gte : Expr * Expr -> Expr
    Ret : Expr -> Return
    Return : Statement
    Func : ID * list(Statement) * Return -> Function


control-flow rules

  root Root(s) = start -> s -> end

  Func(_, stmts, r) = entry -> stmts -> r -> exit

  Assign(n, e) =
    entry -> e -> this -> exit

  DerefAssign(n, e) =
    entry -> e -> this -> exit

  Skip() = entry -> exit
  
  Ret(e) = entry -> e -> this -> exit

  Block(stmts) = entry -> stmts -> exit

  IfThenElse(c, t, e) =
    entry -> c -> t -> exit,
             c -> e -> exit

  While(e, s) =
    entry -> e -> s -> e -> exit
    
  Add(e1, e2) = entry -> e1 -> e2 -> this -> exit
  Sub(e1, e2) = entry -> e1 -> e2 -> this -> exit
  Gt(e1, e2)  = entry -> e1 -> e2 -> this -> exit
  Gte(e1, e2) = entry -> e1 -> e2 -> this -> exit
    
  Print(e) =
    entry -> e -> this -> exit

  node Malloc()
  node Free(_)
  node Int(_)
  node True()
  node False()
  node Ref(_)
  node Deref(_)
  
types
  LocationId = 
  | Top()
  | Loc(int)
  | Bottom()

lattices

  Location where
    type = LocationId
    bottom = Bottom()
    top = Top()
    lub(l, r) = match (l, r) with
      | (Top(), _) => Top()
      | (_, Top()) => Top()
      | (Loc(i), Loc(j)) => if i == j then Loc(i) else Top()
      | (_, Bottom()) => l
      | (Bottom(), _) => r

  LocationMap where
    type = Map[name, Location]
    bottom = Map[name, Location].bottom
    top = Map[name, Location].top
    lub(l, r) = Map[name, Location].lub(l, r)
 
 
properties

  locations: LocationMap

property rules

  locations(_.end) = {[Map[name, Location]]}
  locations(prev -> Assign(n, Malloc())) = { k |-> v | (k |-> v)  <- locations(prev), k != n } \[LocationMap]/ {n |-> Loc(position(prev))}
  locations(prev -> Assign(n, Ref(m))) = { k |-> v | (k |-> v)  <- locations(prev), k != n } \[LocationMap]/ { n |-> v | (k |-> v)  <- locations(prev), k == m }
  locations(prev -> _) = locations(prev)
  