module examples/ValueAnalysis
 
properties
  values: Environment

property rules
  values(_.end) = Environment.bottom

  values(prev -> t@Assign(n, Int(i))) = result
  where
    prevmap : Map[name, Value] = { k |-> v | (k |-> v) <- values(prev) as Map[name, Value], k != n }
    previous: Environment = prevmap as Environment
    newmap  : Map[name, Value] = {n: name |-> Const(i): ConstProp as Value} as Map[name, Value]
    new     : Environment = newmap as Environment
    result  : Environment = previous \[Environment]/ new

  values(prev -> t@Assign(n, _)) = result
  where
    prevmap : Map[name, Value] = { k |-> v | (k |-> v) <- values(prev) as Map[name, Value], k != n }
    previous: Environment = prevmap as Environment
    newmap  : Map[name, Value] = {n: name |-> Top(): ConstProp as Value} as Map[name, Value]
    new     : Environment = newmap as Environment
    result  : Environment = previous \[Environment]/ new
    
  values(prev -> _) = values(prev)

types
  ConstProp =
  | Top()
  | Const(int)
  | Bottom()
  
lattices
  Value is value where
    type = ConstProp
    bottom = Bottom(): ConstProp as Value
    top = Top(): ConstProp as Value
    lub(l: Value, r: Value) = match (l, r) with
      | (Top(), _) => Top(): ConstProp as Value
      | (_, Top()) => Top(): ConstProp as Value
      | (Const(i), Const(j)) => if i == j then (Const(i): ConstProp as Value) else (Top(): ConstProp as Value)
      | (_, Bottom()) => l: ConstProp as Value
      | (Bottom(), _) => r: ConstProp as Value
      
  Environment is collection where
    type = Map[name, Value]
    bottom = Map[name, Value].bottom as Environment
    top = Map[name, Value].top as Environment
    lub(l: Map[name, Value], r: Map[name, Value]) = Map[name, Value].lub(l, r)
    