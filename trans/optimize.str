module optimize

imports
  flock/api

signature
  constructors
    Const : INT -> Const

strategies 

  optimize-program: p -> p'
  where (p', t) := <profile(optimize-program'; flock-debug-graph)> p ; <debug> t

  optimize-program': p -> p''
    with
     p' := <flock-add-id> p
    ; <flock-analyse-program> p'
    ; <flock-debug-graph> ()
    ; p'' := <fixpoint-opt(optimize-program-inner | 3000)> p'

  fixpoint-opt(s|0) = id
  fixpoint-opt(s|bound): p -> <s < (fixpoint-opt(s | <dec> bound)) + id> p
  where <not(equal(|0))> bound

  optimize-program-inner: p -> p'
  where 
   p' := <oncetd(opt-remove + opt-replace)> p
 ; <flock-update> p'
    
  opt-replace: p -> p''
  where 
    p'  := <replacing-optimizations> p 
  ; p'' := <flock-replace-node(|p)> p'
 
  opt-remove: p -> p'
  where
    (p', dead-nodes) := <removing-optimizations> p
  ; <map(flock-remove-node)> dead-nodes
  
  replacing-optimizations = fold-expressions + propagate-constant-read + remove-dead-heap-store + remove-dead-store + replace-dead-if
  removing-optimizations = remove-skips + remove-empty-blocks
  
strategies

  fold-expressions: Add(Int(v1), Int(v2)) -> Int(sum)
  where 
    sum := <(string-to-int, string-to-int); addi; int-to-string> (v1, v2)
  ; <concat-strings; flock-debug> ["[fold-expressions] ", v1, " + ", v2, " -> ", sum]
  
  fold-expressions: Sub(Int(v1), Int(v2)) -> Int(sub)
  where
    sub := <(string-to-int, string-to-int); subti; int-to-string> (v1, v2)
  ; <concat-strings; flock-debug> ["[fold-expressions] ", v1, " + ", v2, " -> ", sub]

  fold-expressions: Gt(Int(v1), Int(v2)) -> res
  where
    res := <(string-to-int, string-to-int); gti < !True() + !False()> (v1, v2)
  ; <concat-strings; flock-debug> ["[fold-expressions] ", v1, " > ", v2]

  fold-expressions: Gte(Int(v1), Int(v2)) -> res
  where
    res := <(string-to-int, string-to-int); (gti + eq) < !True() + !False()> (v1, v2)
  ; <concat-strings; flock-debug> ["[fold-expressions] ", v1, " >= ", v2]
  
strategies

  propagate-constant-read: a@Ref(m) -> Int(<remove-id> v)
  where
    <flock-debug> a
  ; Const(v) := <flock-get-value(|m)> a
  ; <concat-strings; flock-debug> ["Const value ", m, ": ", v]

  remove-dead-store: a@Assign(n, _) -> Skip()
  where
    <not(flock-is-live(|n))> a
  ; <concat-strings; flock-debug> ["dead variable ", n]

  remove-dead-heap-store: a@DerefAssign(n, _) -> Skip()
  where
    <not(flock-is-live(|n))> a
  ; as := <get-alias-set(|n)> a 
  ; <map(!(<id>, a); not(flock-is-live)|)> as
  ; <concat-strings; flock-debug> ["dead heap store ", n]

  replace-dead-if: IfThenElse(True, t, e)  -> <remove-id> t
  where <flock-debug> "removing dead if"

  replace-dead-if: IfThenElse(False, t, e) -> <remove-id> e
  where <flock-debug> "removing dead if"

  replace-dead-if: IfThenElse(e, Skip(), Skip()) -> Skip()
  where <flock-debug> "removing dead if"

strategies

  remove-empty-blocks: Block(stmts) -> (Block(stmts'), empties)
  where
    stmts' := <retain-all(not(?Block([])))> stmts
  ; empties := <retain-all(?Block([]))> stmts
  ; <not(equal)> (stmts, stmts')
  ; <not(equal)> ([], empties)
  where <flock-debug> "removing empty blocks"

  remove-empty-blocks: Func(n, stmts, r) -> (Func(n, stmts', r), empties)
  where
    stmts' := <retain-all(not(?Block([])))> stmts
  ; empties := <retain-all(?Block([]))> stmts
  ; <not(equal)> (stmts, stmts')
  ; <not(equal)> ([], empties)
  where <flock-debug> "removing empty blocks"

  remove-skips: Block(stmts) -> (Block(stmts'), skips)
  where
    stmts' := <retain-all(not(?Skip))> stmts
  ; skips := <retain-all(?Skip)> stmts
  ; <not(equal)> (stmts, stmts')
  ; <not(equal)> ([], skips)
  where <flock-debug> "removing skips"
  
  remove-skips: Func(n, stmts, r) -> (Func(n, stmts', r), skips)
  where
    stmts' := <retain-all(not(?Skip))> stmts
  ; skips := <retain-all(?Skip)> stmts
  ; <not(equal)> (stmts, stmts')
  ; <not(equal)> ([], skips)
  where <flock-debug> "removing skips"

  remove-singleton-block: Block([s]) -> <remove-id> s
  where <flock-debug> "unwrapping statement from block"

strategies

  remove-id: s -> <bottomup(try(remove-single-id))> s
  remove-single-id: s {FlockNodeId(_)} -> <set-annotations> (s, [])
  