module optimize

signature
  constructors
    Const : INT -> Const

strategies 

  optimize-program = fixpoint-opt(|500)

  fixpoint-opt(|0) = id
  fixpoint-opt(|bound): p -> p'
  with 
    p'' := <optimize-program-inner> p
  ; p'  := <equal(|p) <+ fixpoint-opt(|<dec> bound)> p''

  optimize-program-inner: p -> r
  with
    <analyse-program> p
  //; <try(oncetd(?n; opt; replace-node(|p, n)))> p
  ; r := <try(oncetd(opt))> p

  opt = (fold-expressions <+ remove-dead-heap-store <+ propagate-constant-read <+ remove-dead-store <+ remove-dead-code) 

strategies

  fold-expressions: Add(Int(v1), Int(v2)) -> Int(<(string-to-int, string-to-int); addi; int-to-string> (v1, v2))
  fold-expressions: Sub(Int(v1), Int(v2)) -> Int(<(string-to-int, string-to-int); subti; int-to-string> (v1, v2))
  
strategies

  propagate-constant-read: a@Ref(m) -> Int(v)
  where
    Const(v) := <get-value(|m)> a
  ; <concat-strings; debug> ["Const value ", m, ": ", v]

  remove-dead-store: a@Assign(n, _) -> Skip()
  where
    <not(is-live(|n))> a
  ; <concat-strings; debug> ["dead variable ", n]

  remove-dead-heap-store: a@DerefAssign(n, _) -> Skip()
  where
    <debug> a
  ; <not(is-live(|n))> a
  ; as := <get-alias-set(|n)> a 
  ; <debug> (a, as)
  ; <map(!(<id>, a); not(is-live)|)> as
  ; <concat-strings; debug> ["dead heap store ", n]

strategies

  remove-dead-code = remove-empty-block <+ remove-empty-while <+ remove-skip <+ remove-dead-if <+ remove-singleton-block

  remove-empty-block: Block([]) -> Skip()
  where <debug> "removing empty block"

  remove-empty-while: While(e, []) -> Skip()
  where <debug> "removing empty block"

  remove-skip: Block(stmts) ->  Block(stmts')
  where
    stmts' := <retain-all(not(?Skip))> stmts
  ; <not(equal)> (stmts, stmts')
  where <debug> "removing skips"
  
  remove-skip: Func(n, stmts, r) -> Func(n, stmts', r)
  where
    stmts' := <retain-all(not(?Skip))> stmts
  ; <not(equal)> (stmts, stmts')
  where <debug> "removing skips"
  
  remove-skip: While(e, stmts) -> While(e, stmts')
  where
    stmts' := <retain-all(not(?Skip))> stmts
  ; <not(equal)> (stmts, stmts')
  where <debug> "removing skips"
    
  remove-dead-if: IfThenElse(True, t, e)  -> t
  where <debug> "removing dead if"

  remove-dead-if: IfThenElse(False, t, e) -> e
  where <debug> "removing dead if"

  remove-singleton-block: Block([s]) -> s
  where <debug> "unwrapping statement from block"

strategies

  is-live: (name, loc) -> <is-live(|name)> loc

  external analyse-program(|)
  external is-live(|n)
  external get-alias-set(|n)
  external get-value(|n)
  
  external replace-node(|g, n)
  external delete-node(|g)
  